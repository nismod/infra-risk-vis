configfile: "config.yml"


#
# Import our dataset specific rules
#
module aqueduct:
    snakefile: "pipelines/aqueduct/rules.smk"
    config: config
use rule * from aqueduct as aqueduct_*


module cdd_miranda:
    snakefile: "pipelines/cdd_miranda/rules.smk"
    config: config
use rule * from cdd_miranda as cdd_miranda_*
ruleorder: cdd_miranda_clip_raster > clip_raster


module dem:
    snakefile: "pipelines/dem/rules.smk"
    config: config
use rule * from dem as dem_*
ruleorder: dem_clip_raster > clip_raster


module gem_earthquake:
    snakefile: "pipelines/gem_earthquake/rules.smk"
    config: config
use rule * from gem_earthquake as gem_earthquake_*
ruleorder: gem_earthquake_clip_raster > clip_raster


module ghsl_buildings:
    snakefile: "pipelines/ghsl_buildings/rules.smk"
    config: config
use rule * from ghsl_buildings as ghsl_buildings_*


module ghsl_pop:
    snakefile: "pipelines/ghsl_pop/rules.smk"
    config: config
use rule * from ghsl_pop as ghsl_pop_*


module iris:
    snakefile: "pipelines/iris/rules.smk"
    config: config
use rule * from iris as iris_*


module isimip:
    snakefile: "pipelines/isimip/rules.smk"
    config: config
use rule * from isimip as isimip_*


module land_cover:
    snakefile: "pipelines/land_cover/rules.smk"
    config: config
use rule * from land_cover as land_cover_*
ruleorder: land_cover_download_300m_2020_from_CDS > clip_raster
ruleorder: land_cover_ingest_categorical_raster > ingest_rasters


module nature:
    snakefile: "pipelines/nature/rules.smk"
    config: config
use rule * from nature as nature_*


module social:
    snakefile: "pipelines/social/rules.smk"
    config: config
use rule * from social as social_*


module storm:
    snakefile: "pipelines/storm/rules.smk"
    config: config
use rule * from storm as storm_*


module traveltime_to_healthcare:
    snakefile: "pipelines/traveltime_to_healthcare/rules.smk"
    config: config
use rule * from traveltime_to_healthcare as traveltime_to_healthcare_*


#
# Import rule definitions common to many datasets
#
include: "rules/raster_processing.smk"
include: "rules/database.smk"


# Datasets the `all` target rule will expand to
ALL_DATASETS = (
    "aqueduct",
    "cdd_miranda",
    "dem",
    "gem_earthquake",
    "ghsl_buildings",
    "ghsl_pop",
    "iris",
    "isimip",
    "land_cover",
    "nature",
    "storm",
    "traveltime_to_healthcare",
)

# prefix any shell blocks with these statements
# - create variables from env file and export
# - print commands to stdout during execution
# - exit if any command has non-zero exit status, not just the last in a rule
shell.prefix(f"set -a && source ../envs/{config['environment']}/.etl.env && set +a; set -x; set -e; ")

wildcard_constraints:
    KEY="[^/]+",
    DATASET="[^/]+",
    EPOCH="\d+",
    RELEASE="\d{4}[A-Z]",
    RP="\d+",
    SSP="constant|ssp\d",

rule all:
    """
    Target rule to fetch, process and ingest all registered datasets.
    """
    input:
        lambda x: expand("raster/metadata/{dataset}.flag", dataset=ALL_DATASETS)
